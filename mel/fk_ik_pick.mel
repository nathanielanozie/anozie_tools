//author: Nathaniel Anozie (ogbonnawork at gmail dot com)//////modify at own risk//last updated: 09/02/2014 -- working on making it more usableproc na_pickErrorCheck(string $joint, string $ik_joint, string $fk_joint, string $nameNode, string $control,string $attr){    //already made the connection    if(`objExists  $nameNode` == 1){ error("Sorry, Already Connected--"+$nameNode); }        //missing on scene    if(`objExists  $joint` == 0){ error("Sorry, Cannot find--"+$joint); }    if(`objExists  $fk_joint` == 0){ error("Sorry, Cannot find--"+$fk_joint); }        //attribute what were expecting    if(`attributeExists $attr $control` == 0){ error("attribute: "+$attr+" for--"+$control+" not found");}        //any type allowed    /*    //expect either an enum or a bool    int $isEnum = 0;    $isEnum = na_isAttributeOfThisType($control, $attr, "enum" );    if( $isEnum == 0 ){            int $isBool = 0;            $isBool = na_isAttributeOfThisType($control, $attr, "bool" );            if($isBool == 0){error("Expecting an Attribute of Type Enum or Bool"); }    }    */}proc na_pickSuccess(){    print("Created Connections");}/**@pre assumes clean scene*/global proc na_pick_unitTest(){    select -d;    joint -p 0 0 -1 ;    joint -p 4 0 -1 ;    joint -e -zso -oj xyz -sao yup joint1;    select -d joint1 ;    select -d;    joint -p 0 0 2 ;    joint -p 4 0 2 ;    joint -e -zso -oj xyz -sao yup joint3;    CreateNURBSCircle;    circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1; objectMoveCommand;    addAttr -ln "bl"  -at bool  |nurbsCircle1;    setAttr -e-keyable true |nurbsCircle1.bl;    addAttr -ln "en"  -at "enum" -en "fk:ik:"  |nurbsCircle1;    setAttr -e-keyable true |nurbsCircle1.en;    setAttr -lock true -keyable false "nurbsCircle1.tx";    setAttr -lock true -keyable false "nurbsCircle1.ty";    setAttr -lock true -keyable false "nurbsCircle1.tz";    setAttr -lock true -keyable false "nurbsCircle1.rx";    setAttr -lock true -keyable false "nurbsCircle1.ry";    setAttr -lock true -keyable false "nurbsCircle1.rz";    setAttr -lock true -keyable false "nurbsCircle1.sx";    setAttr -lock true -keyable false "nurbsCircle1.sy";    setAttr -lock true -keyable false "nurbsCircle1.sz";    setAttr -lock true -keyable false "nurbsCircle1.v";    select -r joint1 ;    rename "joint1" "fk1";    select -r joint3 ;    rename "joint3" "ik1";    select -r joint2 ;    rename "joint2" "fk2";    select -r joint4 ;    rename "joint4" "ik2";    select -d ik2 ;    select -d;    joint -p 0 0 0 ;    joint -p 4 0 0 ;    joint -e -zso -oj xyz -sao yup joint1;    select -r joint1 ;    rename "joint1" "all1";    select -r joint2 ;    rename "joint2" "all2";    rename "nurbsCircle1" "anim";    na_pick("all1", "fk1", "ik1" , "rotate","anim", "bl", "all1");}/**set up blend colors to allow different joint chains to control a result chain @note limitation to only two option control so this doesn't extend to three or seven chains controlling result...@result creates blend color nodes, makes them connected so options control result chain via animator control@param string $joint  result joint@param string $ik_joint  ik joint@param string $fk_joint  fk joint@param string $type ex: translate or rotate@param string $control -- what is used by animator to switch@param string $attr -- attribute animator uses to switch@param string $nodePrefix -- prefix for blend node*/global proc fk_ik_pick(string $joint, string $ik_joint, string $fk_joint, string $type,string $control, string $attr, string $nodePrefix){        //error check    na_pickErrorCheck( $joint,$ik_joint,$fk_joint,($nodePrefix+"_"+$type+"_blend"),$control, $attr);                //setting some variables    string $attribute[] = {($type+"X"),($type+"Y"),($type+"Z")};    string $nameNode = $nodePrefix+"_"+$type+"_blend";    string $animatorAttr = $control+"."+$attr; //should be able to make two choices only    string $pickArray[] = {"color2","color1"}; // assumes fk is 0 enum or bool, and ik is 1 enum or bool    string $blend_arg="";            //make node, this will stay on animator scene for life of rig    //    createNode blendColors -n $nameNode;            ////now we can use ik rotation on our arm hand joint    //    $pick = $pickArray[0];    $blend_arg = $nameNode+"."+$pick;    connectAttr -f ($ik_joint+"."+$attribute[0]) ($blend_arg+"R");    connectAttr -f ($ik_joint+"."+$attribute[1]) ($blend_arg+"G");    connectAttr -f ($ik_joint+"."+$attribute[2]) ($blend_arg+"B");        ////now we can use fk rotation on our arm hand joint    //    $pick = $pickArray[1];    $blend_arg = $nameNode+"."+$pick;    connectAttr -f ($fk_joint+"."+$attribute[0]) ($blend_arg+"R");    connectAttr -f ($fk_joint+"."+$attribute[1]) ($blend_arg+"G");    connectAttr -f ($fk_joint+"."+$attribute[2]) ($blend_arg+"B");        //now we can use either ik or fk rotation on our arm hand joint    //    connectAttr -f $animatorAttr ($nameNode+".blender");    connectAttr -f ($nameNode+".output"+"R") ($joint+"."+$attribute[0]);    connectAttr -f ($nameNode+".output"+"G") ($joint+"."+$attribute[1]);    connectAttr -f ($nameNode+".output"+"B") ($joint+"."+$attribute[2]);            na_pickSuccess();}