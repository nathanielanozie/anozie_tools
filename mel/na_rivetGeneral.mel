/**@file na_rivetGeneral.mel 
@brief v1.0.0 Tools to help skinning by making glued on skin joints
@author Nathaniel O. Anozie (ogbonnawork at gmail dot com)
@bug all functions no assert checks
@note date created: Aug 15 2012
@see
@note released v1.0.1
@note v1.0.1  added getting specific type from a node
@note Follicle rivet methods Inspired by Aaron Holly, and Jose Anotonio Martin's online
spine rig tutorials
*/


/**might be quicker way to parent joint to surface using pair selection, joint, then curve
@pre hair system made with outputting curves
*/
global proc 
na_parentJointToFollicleByCurveSelection()
{
    string $sel[] = `ls -sl`;
    na_assertSizeEqualArg( $sel, 2 );
    string $joint = $sel[0];
    string $curve = $sel[1];
    na_assertTypeInList({$joint}, {"joint"});
    if( na_isCurve( $curve ) == 0 ){error("Requires Curve As Second Selection");}
    
    string $curveShape[] = `listRelatives -children -type nurbsCurve $curve`;
    
    string $follicle[] = {};
    $follicle = `listConnections -type follicle $curveShape`;
    na_assertSizeEqualArg( $follicle, 1 );
       
    parent $joint $follicle[0];
    
    //by default rename using special suffix
    na_renameBySourceNameAndSuffix( $follicle,"fol", {$joint} );
    
    select -r $sel;
}    
    
/** parent joints to rivetParents
@note would need to change type of rivet parent for other rivet methods like
say make it a locator or something else.
@bug maybe by user selections would make more usable
*/
global proc 
na_parentJointToFollicleByFollicleSelection()
{
    string $sel[] = `ls -sl`;
    na_assertSizeEqualArg( $sel, 2 );
    string $joint = $sel[0];
    string $rivetParent = $sel[1];
    na_assertTypeInList({$joint}, {"joint"});
    string $typeRivetParent = "follicle"; //show second thing expected is follicle
        
    if( na_hasChildOfType($rivetParent, $typeRivetParent) == 0 )
        {error("Requires joints, then "+$typeRivetParent);}
    
    parent $joint $rivetParent;
    
    //by default rename using special suffix
    na_renameBySourceNameAndSuffix( {$rivetParent},"fol", {$joint} );
    
}
global proc na_parentJointToFollicleByFollicleSelection_unitTest()
{
}

/**basic removal of unecessary items for rivet needs selection, hair system transform name
@note for output curve method need to remove an extra empty group
@pre hair system not deleted
*/
global proc 
na_cleanUpRivetFollicleMethod()
{
    string $sel[] = `ls -sl`;
    na_assertSizeEqualArg( $sel, 1 );
    
    string $hairSystemTransform = $sel[0];    
    //remove curve from every follicle
    string $hairShape[] = `listRelatives -children -type hairSystem $hairSystemTransform`;
    na_assertSizeEqualArg( $hairShape, 1 );
    string $follicleShape[] = eval("listRelatives -children -type follicle `listConnections "+$hairShape[0]+"`");
    $follicleShape = stringArrayRemoveDuplicates($follicleShape);
    string $follicle[] = na_getTransformParentOfArg($follicleShape);
    na_assertSizeEqualArg( $follicle, size($follicleShape) );
    
    for($fol in $follicleShape){
        $child = `listConnections -type nurbsCurve $fol`;
        na_assertSizeGreaterEqualTo( $child, 1 );

    }
    string $curve[] = {};
    for($fol in $follicleShape){
        $curve = `listConnections -type nurbsCurve $fol`;
        na_assertSizeGreaterEqualTo( $curve, 1 );
        //remove curve
        delete $curve;
    }
    //

    //remove pfxHair 
    string $pfxShape[] = eval("listRelatives -children -type pfxHair `listConnections "+$hairShape[0]+"`");
    $pfxShape = stringArrayRemoveDuplicates($pfxShape);
    if( size($pfxShape) == 1  ){
        string $pfx[] = na_getTransformParentOfArg($pfxShape);
        na_assertSizeEqualArg( $pfx, 1 );
        delete $pfx[0];
    }
    //
    
    //remove hair system
    delete $hairSystemTransform;
}






/**make a plane with no cv's in u direction
@param int $numberInteriorJointsPlusTwo number of v patches
@param int $numberColumn number of u patches
@note lots of defaults including x is normal direction, length is 5, no u patches
*/
proc string[]
na_drawSkinPlane(int $numberInteriorJointsPlusTwo, int $numberColumns)
{
    string $result[] = {};
    
    //draw nurbs plane
    string $plane[] = `nurbsPlane -p 0 0 0 -ax 1 0 0 -w 1 -lr 5 -d 3 -u $numberColumns -v $numberInteriorJointsPlusTwo -ch 0`;									na_assertSizeEqualArg($plane,1);			
    
    //remove some cvs in u direction
    rebuildSurface -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su $numberColumns -du 1 -sv 5 -dv 3 -tol 3.93701e-05 -fr 0  -dir 0 $plane[0];
    
    $result = `listRelatives -children -type nurbsSurface $plane[0]`;
    
    return $result;
}

/**needs surface selected
@param int $numberInteriorJointsPlusTwo number of v patches
@param int $numberColumn number of u patches
@param string $planeShape name of shape
@note needs, name, asser checks, optional number joints.  
@note depends on hair system for Maya 8.5
*/
proc na_makeSurfaceShapeHaveRivet(int $numberInteriorJointsPlusTwo, int $numberColumns, string $planeShape)
{
    na_assertObjectExist({$planeShape});
    na_assertTypeInList({$planeShape},{"nurbsSurface"});
    select -r $planeShape;
    createHair $numberColumns $numberInteriorJointsPlusTwo 10 0 0 0 0 1 0 2 1 1; 
    //change createHair 1 6 É  to createHair 1 $numberInteriorJointsPlusTwo É 
    //final trio 2 1 1, shows outputting curve by default
}

/**
@param int $numberInteriorJointsPlusTwo number of v patches
@param int $numberColumn number of u patches
*/
global proc 
na_drawFollicleCanvas(int $numberInteriorJointsPlusTwo, int $numberColumns)
{
    string $shape[] = na_drawSkinPlane($numberInteriorJointsPlusTwo,$numberColumns);
    na_assertObjectExist($shape);
    na_assertTypeInList($shape,{"nurbsSurface"});
    na_makeSurfaceShapeHaveRivet($numberInteriorJointsPlusTwo, $numberColumns, $shape[0]);
}




/**Given a selected plane, it figures out surface information to mirro it and add hair
@param int $axisToMirrorAccross what axis to mirror across 0:X, 1:Y, 2:Z
@bug no checks whether selected object has any rivet system
*/
global proc 
na_mirrorSelectedCanvas( int $axisToMirrorAccross )
{
    string $sel[] = `ls -sl`;
     na_assertSizeGreaterEqualTo($sel,1);
     
    //verify single nurbs shape for every select
    for($obj in $sel){
        $shape = `listRelatives -type nurbsSurface $obj`;
        na_assertSizeGreaterEqualTo($shape,1);
    }
    
    string $mirrorObject[] = na_mirrorObjectByScale( $sel, $axisToMirrorAccross );
    na_assertSizeEqualArg($mirrorObject,size($sel));
    
    //needed so were sure we can access surface properties
    for($mirrorObj in $mirrorObject)
    {
        $shapeMirror = `listRelatives -type nurbsSurface $mirrorObj`;
        na_assertSizeEqualArg($shapeMirror,1);
    }
    

    for($i = 0; $i < size($sel); $i++)
    {
        $shapeMirror = `listRelatives -type nurbsSurface $mirrorObject[$i]`;
        $numberInteriorJointsPlusTwo = `getAttr ($shapeMirror[0]+".spansV")`;
        $numberColumns = `getAttr ($shapeMirror[0]+".spansU")`;
        
        //this makes the rivet system, i'm guessing it wouldn't be too hard substitute
        //a different rivet system
        na_makeSurfaceShapeHaveRivet($numberInteriorJointsPlusTwo, $numberColumns, $shapeMirror[0]);
    }
}




